{
	"info": {
		"_postman_id": "4bc1dc80-6433-4e5c-b8d9-c5df9e070bd1",
		"name": "HOL-2201-10-CMP",
		"description": "End to end CAS Initial Config\n- Login via API\n- Create AWS/Azure Cloud Accounts\n- Create cloud zones\n- Create project\n- Tag zones\n- Create flavor and image mappings\n- Create storage and network profiles\n- Tag discovered Networks\n- Create a Blueprint\n- Deploy the Blueprint",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "00 - Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response contains refresh token\"] = responseBody.has(\"refresh_token\");",
									"postman.clearEnvironmentVariable(\"refreshToken\");",
									"var data = JSON.parse(responseBody);",
									"tests[\"Auth token is not null\"] = data.refresh_token !== \"\";",
									"postman.setEnvironmentVariable(\"refreshToken\", data.refresh_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{adminUsername}}\",\n\t\"password\": \"{{adminPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url-home}}/csp/gateway/am/api/login?access_token",
							"host": [
								"{{url-home}}"
							],
							"path": [
								"csp",
								"gateway",
								"am",
								"api",
								"login"
							],
							"query": [
								{
									"key": "access_token",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "01 - Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response contains auth token\"] = responseBody.has(\"token\");",
									"postman.clearEnvironmentVariable(\"token\");",
									"var data = JSON.parse(responseBody);",
									"tests[\"Auth token is not null\"] = data.token !== \"\";",
									"postman.setEnvironmentVariable(\"token\", data.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{url-home}}/iaas/api/login",
							"host": [
								"{{url-home}}"
							],
							"path": [
								"iaas",
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "VI Admin Tasks",
			"item": [
				{
					"name": "01 - Create a Project",
					"item": [
						{
							"name": "01 - Get Cloud Zones",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"for ( i=0; i<jsonData.content.length; i++) {",
											"    if (jsonData.content[i].name.has(\"aws-us-west-1\")) {",
											"        postman.clearEnvironmentVariable(\"awsZoneLink\");",
											"        postman.clearEnvironmentVariable(\"awsZoneName\");",
											"        postman.setEnvironmentVariable(\"awsZoneLink\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"awsZoneName\", jsonData.content[i].name);",
											"    }",
											"    if (jsonData.content[i].name.has(\"azure-west-us\")) {",
											"        postman.clearEnvironmentVariable(\"azureZoneLink\");",
											"        postman.clearEnvironmentVariable(\"azureZoneName\");",
											"        postman.setEnvironmentVariable(\"azureZoneLink\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"azureZoneName\", jsonData.content[i].name);",
											"    }",
											"    if (jsonData.content[i].name.has(\"RegionA01\")) {",
											"        postman.clearEnvironmentVariable(\"vsphereZoneLink\");",
											"        postman.clearEnvironmentVariable(\"vsphereZoneName\");",
											"        postman.setEnvironmentVariable(\"vsphereZoneLink\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"vsphereZoneName\", jsonData.content[i].name);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{url-home}}/iaas/api/zones",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"zones"
									]
								}
							},
							"response": []
						},
						{
							"name": "02 - Create New Project with Zones",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\" : \"App-Dev Project\",\n\t\"description\" : \"API Generated Project\",\n    \"administrators\" : [\n        {\n            \"email\" : \"holadmin@corp.local\"\n        }\n    ],\n    \"members\" : [\n    \t{\n    \t\t\"email\" : \"holuser@corp.local\"\n    \t}\n    ],\n    \"zoneAssignmentConfigurations\":[\n\t    {\n\t    \t\"zoneId\": \"{{awsZoneLink}}\",\n\t    \t\"priority\": 1\n\t    }, \n\t    {\n\t    \t\"zoneId\": \"{{azureZoneLink}}\",\n\t    \t\"priority\": 2\n\t    },\n\t    {\n\t    \t\"zoneId\": \"{{vsphereZoneLink}}\",\n\t    \t\"priority\": 1\n\t    }\n    ]\n}"
								},
								"url": {
									"raw": "{{url-home}}/iaas/api/projects",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"projects"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "02 - Update Cloud Zone Tags",
					"item": [
						{
							"name": "01 - Get Cloud Zones",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"for ( i=0; i<jsonData.content.length; i++) {",
											"    if (jsonData.content[i].name.has(\"aws-us-west-1\")) {",
											"        postman.clearEnvironmentVariable(\"awsZoneLink\");",
											"        postman.clearEnvironmentVariable(\"awsZoneName\");",
											"        postman.setEnvironmentVariable(\"awsZoneLink\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"awsZoneName\", jsonData.content[i].name);",
											"    }",
											"    if (jsonData.content[i].name.has(\"azure-west-us\")) {",
											"        postman.clearEnvironmentVariable(\"azureZoneLink\");",
											"        postman.clearEnvironmentVariable(\"azureZoneName\");",
											"        postman.setEnvironmentVariable(\"azureZoneLink\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"azureZoneName\", jsonData.content[i].name);",
											"    }",
											"    if (jsonData.content[i].name.has(\"RegionA01\")) {",
											"        postman.clearEnvironmentVariable(\"vsphereZoneLink\");",
											"        postman.clearEnvironmentVariable(\"vsphereZoneName\");",
											"        postman.setEnvironmentVariable(\"vsphereZoneLink\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"vsphereZoneName\", jsonData.content[i].name);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{url-home}}/iaas/api/zones",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"zones"
									]
								}
							},
							"response": []
						},
						{
							"name": "02 - Update Tags on vSphere Cloud Zone",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{vsphereZoneName}}\",\n  \"tags\": [\n    {\n      \"key\": \"cloud\",\n      \"value\": \"vsphere\"\n    }\n  ]\n}\n"
								},
								"url": {
									"raw": "{{url-home}}/iaas/api/zones/{{vsphereZoneLink}}",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"zones",
										"{{vsphereZoneLink}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "03 - Update Tags AWS Cloud Zones",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{awsZoneName}}\",\n    \"tags\": [\n        {\n            \"key\": \"cloud\",\n            \"value\": \"aws\"\n        },\n        {\n            \"key\": \"env\",\n            \"value\": \"dev\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{url-home}}/iaas/api/zones/{{awsZoneLink}}",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"zones",
										"{{awsZoneLink}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "04 - Update Tags Azure Cloud Zones",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{azureZoneName}}\",\n    \"tags\": [\n        {\n            \"key\": \"cloud\",\n            \"value\": \"azure\"\n        },\n        {\n            \"key\": \"env\",\n            \"value\": \"test\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{url-home}}/iaas/api/zones/{{azureZoneLink}}",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"zones",
										"{{azureZoneLink}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "03 - Create a Flavor Mapping",
					"item": [
						{
							"name": "01 - Get Regions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"for ( i=0; i<jsonData.content.length; i++) {",
											"    if (jsonData.content[i].externalRegionId.has(\"us-west-1\")) {",
											"        postman.setEnvironmentVariable(\"awsRegionLink\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"awsExternalRegionId\", jsonData.content[i].externalRegionId);",
											"    }",
											"    if (jsonData.content[i].externalRegionId.has(\"westus\")) {",
											"        postman.setEnvironmentVariable(\"azureRegionLink\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"azureExternalRegionId\", jsonData.content[i].externalRegionId);",
											"    }",
											"    if (jsonData.content[i].externalRegionId.has(\"datacenter-1001\")) {",
											"        postman.setEnvironmentVariable(\"vsphereRegionLink\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"vsphereExternalRegionId\", jsonData.content[i].externalRegionId);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{url-home}}/iaas/api/regions",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"regions"
									]
								}
							},
							"response": []
						},
						{
							"name": "02 - Get Fabric Flavor Mappings (Profiles)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"for ( i=0; i<jsonData.content.length; i++) {\r",
											"    if (jsonData.content[i].externalRegionId.has(\"us-west-1\")) {\r",
											"        postman.setEnvironmentVariable(\"awsFlavorMapId\", jsonData.content[i].id);\r",
											"    }\r",
											"    if (jsonData.content[i].externalRegionId.has(\"west-us\")) {\r",
											"        postman.setEnvironmentVariable(\"azureFlavorMapId\", jsonData.content[i].id);\r",
											"    }\r",
											"    if (jsonData.content[i].externalRegionId.has(\"datacenter-1001\")) {\r",
											"        postman.setEnvironmentVariable(\"vsphereFlavorMapId\", jsonData.content[i].id);\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{url-home}}/iaas/api/flavor-profiles/",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"flavor-profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "03 - Update vSphere Flavor Mapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"for ( i=0; i<jsonData.length; i++) {",
											"    if (jsonData[i].name.has(\"eastus\")) {",
											"        postman.clearEnvironmentVariable(\"azureZoneLink\");",
											"        postman.setEnvironmentVariable(\"azureZoneLink\", jsonData[i].id);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"vSphere Profile\",\n\t\"description\": \"vSphere flavor profile created through REST API\",\n\t\"flavorMapping\": {\n        \"extra large\": {\n            \"cpuCount\": 4,\n            \"memoryInMB\": 8192\n        },\n        \"tiny\": {\n            \"cpuCount\": 1,\n            \"memoryInMB\": 512\n        },        \n        \"small\": {\n            \"cpuCount\": 1,\n            \"memoryInMB\": 1024\n        },\n        \"medium\": {\n\t        \"cpuCount\": 1,\n            \"memoryInMB\": 2048\n        },\n        \"large\": {\n            \"cpuCount\": 2,\n            \"memoryInMB\": 4096\n        }\n\t},\n\t\"regionId\": \"{{vsphereeRegionLink}}\"\n\t}"
								},
								"url": {
									"raw": "{{url-home}}/iaas/api/flavor-profiles/{{vsphereFlavorMapId}}",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"flavor-profiles",
										"{{vsphereFlavorMapId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "04 - Create a Cloud Template",
					"item": [
						{
							"name": "01 - Get Projects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"for ( i=0; i<jsonData.content.length; i++) {",
											"    if (jsonData.content[i].name.has(\"App-Dev Project\")) {",
											"",
											"        postman.setEnvironmentVariable(\"projectId\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"projectLink\", jsonData.content[i]._links.self.href);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{url-home}}/iaas/api/projects",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"projects"
									]
								}
							},
							"response": []
						},
						{
							"name": "02 - Get Cloud Templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"for ( i=0; i<jsonData.content.length; i++) {\r",
											"        if (jsonData.content[i].contentSourcePath.has(\"blueprints/ubuntu-18/blueprint.yaml\")) {\r",
											"            postman.setEnvironmentVariable(\"templateId\", jsonData.content[i].id);\r",
											"        }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{url-home}}/blueprint/api/blueprints/",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"blueprint",
										"api",
										"blueprints",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "03 - Get Ubuntu 18 Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{url-home}}/blueprint/api/blueprints/{{templateId}}",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"blueprint",
										"api",
										"blueprints",
										"{{templateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "04 - Create Cloud Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"bpId\", jsonData.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Blueprint Template\",\n  \"description\": \"API generated blueprint\",\n  \"projectId\": \"{{projectId}}\",\n  \"tags\": [\n  \t\n  ],\n    \"content\": \"\"\n}"
								},
								"url": {
									"raw": "{{url-home}}/blueprint/api/blueprints",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"blueprint",
										"api",
										"blueprints"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "05 - Deploy a Cloud Template",
					"item": [
						{
							"name": "01 - Get Projects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"for ( i=0; i<jsonData.content.length; i++) {",
											"    if (jsonData.content[i].name.has(\"App-Dev Project\")) {",
											"",
											"        postman.setEnvironmentVariable(\"projectId\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"projectLink\", jsonData.content[i]._links.self.href);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{url-home}}/iaas/api/projects",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"projects"
									]
								}
							},
							"response": []
						},
						{
							"name": "02 - Get Cloud Templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"for ( i=0; i<jsonData.content.length; i++) {\r",
											"    if (jsonData.content[i].name.has(\"New Ubuntu 18 Server\")) {\r",
											"\r",
											"        postman.setEnvironmentVariable(\"blueprintId\", jsonData.content[i].id);\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{url-home}}/blueprint/api/blueprints/",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"blueprint",
										"api",
										"blueprints",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "03 - Provision Cloud Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blueprintId\": \"{{bpId}}\",\n  \"deploymentName\": \"\",\n  \"description\": \"Requested from vRA8 API\",\n  \"destroy\": false,\n  \"inputs\": {\"count\":\"1\"},\n  \"plan\": false,\n  \"projectId\": \"{{projectId}}\",\n  \"reason\": \"HOL API Demo\"\n}"
								},
								"url": {
									"raw": "{{url-home}}/blueprint/api/blueprint-requests",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"blueprint",
										"api",
										"blueprint-requests"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "06 - Delete a Deployment",
					"item": [
						{
							"name": "01 - Get Deployments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"for ( i=0; i<jsonData.content.length; i++) {\r",
											"    if (jsonData.content[i].name.has(\"HOL API Demo\")) {\r",
											"\r",
											"        postman.setEnvironmentVariable(\"deploymentId\", jsonData.content[i].id);\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url-home}}/deployment/api/deployments",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"deployment",
										"api",
										"deployments"
									]
								}
							},
							"response": []
						},
						{
							"name": "02 - Delete the Deployment",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url-home}}/deployment/api/deployments/{{deploymentId}}",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"deployment",
										"api",
										"deployments",
										"{{deploymentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "07 - Update an Image Mapping",
					"item": [
						{
							"name": "02 - Get Regions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"for ( i=0; i<jsonData.content.length; i++) {",
											"    if (jsonData.content[i].externalRegionId.has(\"us-west-1\")) {",
											"        postman.setEnvironmentVariable(\"awsRegionLink\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"awsExternalRegionId\", jsonData.content[i].externalRegionId);",
											"    }",
											"    if (jsonData.content[i].externalRegionId.has(\"westus\")) {",
											"        postman.setEnvironmentVariable(\"azureRegionLink\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"azureExternalRegionId\", jsonData.content[i].externalRegionId);",
											"    }",
											"    if (jsonData.content[i].externalRegionId.has(\"datacenter-21\")) {",
											"        postman.setEnvironmentVariable(\"vsphereRegionLink\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"vsphereExternalRegionId\", jsonData.content[i].externalRegionId);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{url-home}}/iaas/api/regions",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"regions"
									]
								}
							},
							"response": []
						},
						{
							"name": "03 - Get vSphere Fabric Images with OData",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"for ( i=0; i<jsonData.content.length; i++) {",
											"    if (jsonData.content[i].externalId.has(\"501c62d8-ec82-b73f-69b6-ce0d04f885c1\"))",
											"    {",
											"        postman.setEnvironmentVariable(\"vsphereUbuntuLink\", jsonData.content[i]._links.self.href);",
											"        postman.setEnvironmentVariable(\"vsphereUbuntuId\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"vsphereUbuntuName\", jsonData.content[i].name);",
											"    }",
											"    if (jsonData.content[i].externalId.has(\"501cc811-31e2-bf21-412a-1873d0019ad2\"))",
											"    {",
											"        postman.setEnvironmentVariable(\"vsphereCentOSLink\", jsonData.content[i]._links.self.href);",
											"        postman.setEnvironmentVariable(\"vsphereCentOSId\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"vsphereCentOSName\", jsonData.content[i].name);",
											"    }",
											"    if (jsonData.content[i].externalId.has(\"501c182e-62eb-ddab-fa63-f7ad656ddfe9\"))",
											"    {",
											"        postman.setEnvironmentVariable(\"vsphereWindowsLink\", jsonData.content[i]._links.self.href);",
											"        postman.setEnvironmentVariable(\"vsphereWindowsId\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"vsphereWindowsName\", jsonData.content[i].name);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{url-home}}/iaas/api/fabric-images?$filter=externalRegionId eq '{{vsphereExternalRegionId}}'",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"fabric-images"
									],
									"query": [
										{
											"key": "$filter",
											"value": "externalRegionId eq '{{vsphereExternalRegionId}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "16 - Get Image Mappings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"for ( i=0; i<jsonData.content.length; i++) {\r",
											"        postman.setEnvironmentVariable(\"vsphereImageProfileId\", jsonData.content[i].id);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url-home}}/iaas/api/image-profiles?$filter=externalRegionId eq '{{vsphereExternalRegionId}}'",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"image-profiles"
									],
									"query": [
										{
											"key": "$filter",
											"value": "externalRegionId eq '{{vsphereExternalRegionId}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "17 - Create vSphere Image Mapping",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \n  \"name\" : \"vSphere Image Profile\",\t\n  \"description\": \"vSphere Image Profile\",\n  \"imageMapping\" : {\n    \"Ubuntu18\": {\n      \"name\": \"{{vsphereUbuntuName}}\",\n      \"id\": \"{{vsphereUbuntuId}}\"\n    },\n    \"Windows2019\": {\n      \"name\": \"{{vsphereWindowsName}}\",\n      \"id\": \"{{vsphereWindowsId}}\"\n    },\n    \"CentOS7\": {\n      \"name\": \"{{vsphereCentOSName}}\",\n      \"id\": \"{{vsphereCentOSId}}\"\n    },\n    \"HOL Windows2019\": {\n      \"id\": \"{{vsphereWindowsId}}\",\n      \"name\": \"{{vsphereWindowsName}}\"\n    }\n  },\n  \"regionId\": \"{{vsphereRegionLink}}\"\n}"
								},
								"url": {
									"raw": "{{url-home}}/iaas/api/image-profiles/{{vsphereImageProfileId}}",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"image-profiles",
										"{{vsphereImageProfileId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "08 - Create a Network Profile",
					"item": [
						{
							"name": "02 - Get Regions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"for ( i=0; i<jsonData.content.length; i++) {",
											"    if (jsonData.content[i].externalRegionId.has(\"us-west-1\")) {",
											"        postman.setEnvironmentVariable(\"awsRegionLink\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"awsExternalRegionId\", jsonData.content[i].externalRegionId);",
											"    }",
											"    if (jsonData.content[i].externalRegionId.has(\"westus\")) {",
											"        postman.setEnvironmentVariable(\"azureRegionLink\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"azureExternalRegionId\", jsonData.content[i].externalRegionId);",
											"    }",
											"    if (jsonData.content[i].externalRegionId.has(\"datacenter-21\")) {",
											"        postman.setEnvironmentVariable(\"vsphereRegionLink\", jsonData.content[i].id);",
											"        postman.setEnvironmentVariable(\"vsphereExternalRegionId\", jsonData.content[i].externalRegionId);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{url-home}}/iaas/api/regions",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"regions"
									]
								}
							},
							"response": []
						},
						{
							"name": "19 - Get vSphere Networks with OData",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = JSON.parse(responseBody);",
											"",
											"for ( i=0; i<jsonData.content.length; i++) {",
											"    if (jsonData.content[i].name.has(\"VM-RegionA01-vDS-COMP\")) {",
											"        postman.setEnvironmentVariable(\"vsphereNetworkLink\", jsonData.content[i].id);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "{{url-home}}/iaas/api/fabric-networks?$filter=externalRegionId eq '{{vsphereExternalRegionId}}'",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"fabric-networks"
									],
									"query": [
										{
											"key": "$filter",
											"value": "externalRegionId eq '{{vsphereExternalRegionId}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "20 - Create vSphere Network profile",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"HOL Network Profile\",\n  \"description\": \"API Generated Network Profile\",\n  \"fabricNetworkIds\": [\n    \"{{vsphereNetworkLink}}\"\n  ],\n  \"regionId\": \"{{vsphereRegionLink}}\",\n  \"tags\": [\n    {\n      \"key\": \"net\",\n      \"value\": \"vsphere\"\n    }\n    ]\n}"
								},
								"url": {
									"raw": "{{url-home}}/iaas/api/network-profiles",
									"host": [
										"{{url-home}}"
									],
									"path": [
										"iaas",
										"api",
										"network-profiles"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}